# HG changeset patch
# Parent cb1dc92ca0b9999a4af96d5b1e940f5c056998b7

diff --git a/src/arch/x86/tlb.cc b/src/arch/x86/tlb.cc
--- a/src/arch/x86/tlb.cc
+++ b/src/arch/x86/tlb.cc
@@ -236,6 +236,7 @@
 
     if (m5opRange.contains(paddr)) {
         if (m5opRange.contains(paddr)) {
+            DPRINTF(TLB, "Set address flag to mmaped %#x.\n", paddr);
             req->setFlags(Request::MMAPPED_IPR | Request::GENERIC_IPR);
             req->setPaddr(GenericISA::iprAddressPseudoInst(
                             (paddr >> 8) & 0xFF,
@@ -248,6 +249,13 @@
         AddrRange apicRange(localApicBase.base * PageBytes,
                             (localApicBase.base + 1) * PageBytes - 1);
 
+        // make PCI address space uncacheable
+        // 0xC0000000 <= padd <= 0xFFFF0000
+        if(paddr >= 3221225472 && paddr <= 4294901760){
+            DPRINTF(TLB, "Set address flag to uncacheable %#x.\n", paddr);
+            req->setFlags(Request::UNCACHEABLE);
+        }
+
         if (apicRange.contains(paddr)) {
             // The Intel developer's manuals say the below restrictions apply,
             // but the linux kernel, because of a compiler optimization, breaks
@@ -261,6 +269,7 @@
                 return new GeneralProtection(0);
             */
             // Force the access to be uncacheable.
+            DPRINTF(TLB, "Set address flag to uncacheable! %#x.\n", paddr);
             req->setFlags(Request::UNCACHEABLE);
             req->setPaddr(x86LocalAPICAddress(tc->contextId(),
                                               paddr - apicRange.start()));
