# HG changeset patch
# Parent bdad19b08716fdd6887e11f15ad072b868099d60

diff --git a/configs/common/Simulation.py b/configs/common/Simulation.py
--- a/configs/common/Simulation.py
+++ b/configs/common/Simulation.py
@@ -276,6 +276,76 @@
 
     return exit_event
 
+def benchCheckpoints_sync(options ,maxreltick ,sync_ticks ,cptdir,testsys):
+
+
+    #added by MA
+    import socket
+    TCP_IP = options.sync_host
+    TCP_PORT = options.sync_port
+    BUFFER_SIZE = 1
+    MESSAGE = "R"
+    if options.switch == None:
+        try:
+            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            s.connect((TCP_IP, TCP_PORT))
+
+            exit_event = m5.simulate(sync_ticks)
+            exit_cause = exit_event.getCause()
+            total_tick_simulated = sync_ticks
+            num_checkpoints = 0
+            max_checkpoints = options.max_checkpoints
+            s.send(MESSAGE)
+            data = s.recv(BUFFER_SIZE)
+        except KeyboardInterrupt:
+            sys.exit()
+        while total_tick_simulated <= maxreltick and (exit_cause =="simulate() limit reached" or exit_cause =="checkpoint"):
+            if exit_cause == "checkpoint":
+                m5.checkpoint(joinpath(cptdir, "cpt.%d"))
+                num_checkpoints += 1
+                if num_checkpoints == max_checkpoints:
+                    exit_cause = "maximum %d checkpoints dropped" % max_checkpoints
+                    break
+            s.send(MESSAGE)
+            data = s.recv(BUFFER_SIZE)
+            exit_event = m5.simulate(sync_ticks)
+            total_tick_simulated +=sync_ticks
+            if options.cpt_period and (total_tick_simulated >= options.warmup_period):
+                if (total_tick_simulated % options.cpt_period) == 0:
+                    m5.checkpoint(joinpath(cptdir, "cpt.%d"))
+                    os.system("cp %s/m5out/system.pc.com_1.terminal %s"%(getcwd(),cptdir+"/cpt."+str(m5.curTick())))
+                    num_checkpoints += 1
+                    if num_checkpoints == max_checkpoints:
+                        exit_cause = "maximum %d checkpoints dropped" % max_checkpoints
+                        break
+
+            if data == "C" :
+                m5.checkpoint(joinpath(cptdir, "cpt.%d"))
+                num_checkpoints += 1
+                if num_checkpoints == max_checkpoints:
+                    exit_cause = "maximum %d checkpoints dropped" % max_checkpoints
+                    break
+
+            exit_cause = exit_event.getCause()
+
+        return exit_event
+    else:
+        try:
+            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+            s.connect((TCP_IP, TCP_PORT))
+
+            exit_event = m5.simulate(sync_ticks)
+            exit_cause = exit_event.getCause()
+            total_tick_simulated = sync_ticks
+            num_checkpoints = 0
+            max_checkpoints = options.max_checkpoints
+            s.send('S')
+        except KeyboardInterrupt:
+            sys.exit()
+        while 1:
+            s.send('S')
+            exit_event = m5.simulate(1000000000000)
+
 # Set up environment for taking SimPoint checkpoints
 # Expecting SimPoint files generated by SimPoint 3.2
 def parseSimpointAnalysisFile(options, testsys):
@@ -684,7 +754,10 @@
             exit_event = repeatSwitch(testsys, repeat_switch_cpu_list,
                                       maxtick, options.repeat_switch)
         else:
-            exit_event = benchCheckpoints(options, maxtick, cptdir)
+            if options.sync:
+                exit_event = benchCheckpoints_sync(options,maxtick - m5.curTick() , options.sync, cptdir,testsys)
+            else:
+                exit_event = benchCheckpoints(options, maxtick, cptdir)
 
     print 'Exiting @ tick %i because %s' % (m5.curTick(), exit_event.getCause())
     if options.checkpoint_at_end:
